<?php

namespace Tests\Elastic;

use Tests\TestCase;
use Elasticsearch\Client;

use ScoutElastic\IndexConfigurator;
use App\Elastic\SongLyricIndexConfigurator;
use App\SongLyric;

class SongLyricIndexTest extends TestCase
{
    protected Client $client;
    protected IndexConfigurator $index_config;
    protected array $mapping;

    protected $index_name = 'song_lyric_index_test';

    public function setUp(): void
    {
        parent::setUp();

        $this->client = app(Client::class);
        $this->index_config = app(SongLyricIndexConfigurator::class);
        $this->mapping = (new SongLyric())->getMapping();
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testCreateIndex()
    {
        $index = $this->client->indices()->create([
            'index' => $this->index_name,
            'body' => [
                'settings' => $this->index_config->getSettings()
            ]
        ]);

        $this->assertIsArray($index);
        $this->assertTrue($index['acknowledged']);
        $this->assertTrue($index['shards_acknowledged']);
        $this->assertEquals($index['index'], $this->index_name);
    }

    public function testSongLyricNameAnalyzer()
    {
        $res = $this->client->indices()->analyze([
            'index' => $this->index_name,
            'body' => [
                'analyzer' => 'name_analyzer',
                'text' => 'Chval ho, ó, duše má'
            ]
        ]);

        $toks = array_map(fn ($tok) => $tok['token'], $res['tokens']);
        logger($toks);

        $this->assertContains('chval', $toks);
        $this->assertContains('duse', $toks);

        $res = $this->client->indices()->analyze([
            'index' => $this->index_name,
            'body' => [
                'analyzer' => 'name_analyzer',
                'text' => ['10,000 reasons', '10,000 duvodu']
            ]
        ]);

        $toks = array_map(fn ($tok) => $tok['token'], $res['tokens']);
        logger($toks);

        $this->assertContains('10000', $toks);
        $this->assertContains('reasons', $toks);
    }

    public function testPutSongLyricsMapping()
    {
        // https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index_management.html#_put_mappings_api
        $mappingInfo = [
            'index' => $this->index_name,
            'body' =>
            array_merge(
                ['_source' => ['enabled' => true]],
                $this->mapping
            )
        ];

        $res = $this->client->indices()->putMapping($mappingInfo);

        $this->assertIsArray($res);
        $this->assertTrue($res['acknowledged']);

        // logger($this->client->indices()->getMapping(['index' => $this->index_name]));
    }

    public function testPutIndexingData()
    {
        $params = [
            'index' => $this->index_name,
            'body'  => [
                'name' => '10,000 reasons',
                'name_keyword' => 'myname'
            ]
        ];

        // Document will be indexed to my_index/_doc/<autogenerated ID>
        $res = $this->client->index($params);

        $this->assertIsArray($res);
        $this->assertEquals($res['result'], 'created');
    }

    public function testSearchName()
    {
        $params = [
            'from' => 0,
            'index'  => $this->index_name,
            // 'body'   => [
            //     'query' => [
            //         'multi_match' => [
            //             'query' => 'reasons',
            //             'type' => 'bool_prefix',
            //             'fields' => [
            //                 'name',
            //                 'name._2grlllam',
            //                 'name._3gram'
            //             ]
            //         ]
            //     ]
            // ]
            'body' => [
                'query' => [
                    'match_all' => new \stdClass()
                ]
            ]
        ];

        $response = $this->client->search($params);

        logger($response);
    }

    // public function testSongLyricTextAnalyzer()
    // {
    //     $res = $this->client->indices()->analyze([
    //         'index' => $this->index_name,
    //         'body' => [
    //             'analyzer' => 'text_analyzer',
    //             'text' => "Ať srdce mé Tebe vídá,\r\nať srdce mé Tebe zná,\r\nvidět Tě toužím, \r\nvidět Tě toužím.\r\n\r\nChci vidět Krále na trůnu,\r\nzářícího ve světle slávy.\r\nVylej svou lásku a moc,\r\nkdyž zpívám: Svatý, svatý, svatý.\r\n\r\nSvatý, svatý, svatý,\r\nsvatý, svatý, svatý,\r\nsvatý, svatý, svatý,\r\nvidět Tě toužím."
    //         ]
    //     ]);

    //     $toks = array_map(fn ($tok) => $tok['token'], $res['tokens']);
    //     logger($toks);

    //     // $this->assertContains('chval', $toks);
    //     // $this->assertContains('chval ho o', $toks);
    //     // $this->assertContains('duse ma', $toks);
    //     // $this->assertContains('duse', $toks);
    // }

    public function testDeleteIndex()
    {
        $res = $this->client->indices()->delete([
            'index' => $this->index_name
        ]);

        $this->assertIsArray($res);
        $this->assertTrue($res['acknowledged']);
    }
}
